bst 4  # 2,4,
bxl 3  # 1,3,
cdv 5  # 7,5,
adv 3  # 0,3,
bxc 3  # 4,3
bxl 1  # 1,5,
out 5  # 5,5
jnz 0  # 3,0


do {
 b = a % 8          // bst 4
 b = b xor 3        // bxl 3
 c = a / (2^b)      // cdv 5
 a = a / 8          // adv 3
 b = b xor c        // bxc 3
 b = b xor 5        // bxl 1
 println(b%8)         // out 5
} while (a != 0)
loop should run exactly 16 times -> a in 8^15 .. 8^16 -> good luck brute forcing

Each output depends on the last 3 bits
every iteration the last 3 bits are dropped
reverse engineer the output reversed and increase A




